{"version":3,"sources":["actions/index.js","components/Counter.js","reducers/index.js","index.js"],"names":["INCREMENT","DECREMENT","Counter","incrementIfOdd","props","count","increment","incrementAsync","setTimeout","this","onClick","decrement","Component","connect","state","type","initialState","store","createStore","action","ReactDOM","render","About","document","getElementById"],"mappings":"0LAAaA,EAAY,YACZC,EAAY,Y,OCGnBC,E,4MAEFC,eAAiB,WAEf,EAAKC,MAAMC,MAAQ,IAAM,GAAI,EAAKD,MAAME,a,EAG1CC,eAAiB,WAEbC,YAAW,WACP,EAAKJ,MAAME,cACR,M,4CAGX,WAAU,IAAD,OAGL,OACI,4CACgBG,KAAKL,MAAMC,MAD3B,SAEI,wBAAQK,QAAS,WAAO,EAAKN,MAAME,WAAnC,gBAGA,wBAAQI,QAAS,WAAO,EAAKN,MAAMO,WAAnC,iBAIC,wBAAQD,QAASD,KAAKN,eAAtB,oCAGD,wBAAQO,QAASD,KAAKF,eAAtB,sD,GA9BMK,aAsDPC,eAXS,SAACC,GACrB,MAAO,CACHT,MAAOS,EAAMT,SASmB,CAAEC,UDlDnB,WAErB,MAAO,CACLS,KAAM,cC+C2CJ,UD3C9B,WAEpB,MAAO,CACNI,KAAM,eCwCKF,CAAmDX,G,OCxD5Dc,EAAe,CACnBX,MAAO,GCSHY,EAAQC,aDHC,WAAmC,IAAlCJ,EAAiC,uDAAzBE,EAAcG,EAAW,uCAC/C,OAAQA,EAAOJ,MACb,KAAKf,EAGL,KAAKC,EAEL,OAAO,2BAAIa,GAAX,IAAkBT,MAAMS,EAAMT,MAAQ,IACtC,QACE,OAAO,eAAIS,OCAjBM,IAASC,OACP,eAAC,IAAD,CAAUJ,MAAOA,EAAjB,UAEE,cAAC,EAAD,IACA,cAACK,MAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.ca9aed9d.chunk.js","sourcesContent":["export const INCREMENT = 'INCREMENT';\r\nexport const DECREMENT = 'DECREMENT';\r\n\r\n// Nuestras actions (action creators) devolverán un paquete de actions que nuestro reducer recibirá. \r\n// ¿Cómo es el paquete de acción? Tengan en cuenta que el creador de la acción no es en absoluto responsable \r\n// de manejar ninguna de las lógicas actuales de actualización del store central de Redux.\r\n// Eso se lo deja al reducer(s).\r\n\r\nexport var increment = () => {\r\n  // Completa la funcion\r\n  return {\r\n    type: 'INCREMENT'\r\n  };\r\n};\r\n\r\nexport var decrement = () => {\r\n  // Completa la funcion\r\n   return {\r\n    type: 'DECREMENT'\r\n  };\r\n};","import React, { Component } from \"react\";\r\nimport { connect } from 'react-redux';\r\nimport { increment, decrement } from '../actions';\r\n\r\nclass Counter extends Component {\r\n    // Extra Credit\r\n    incrementIfOdd = () => {\r\n      //Implementar una función de incremento que sólo aumenta si el valor del contador es impar\r\n      this.props.count % 2 === 0 ? this.props.increment() : null;\r\n    };\r\n    // Extra Credit\r\n    incrementAsync = () => {\r\n        //  Implementar una función de incremento que aumenta después de esperar un segundo\r\n        setTimeout(() => {\r\n            this.props.increment();\r\n            }, 1000);\r\n    };\r\n\r\n    render() {\r\n        // Completa las funciones onClick de los botones\r\n        // Al hacer clic en estos botones, el recuento debe disminuir o aumentar en consecuencia\r\n        return (\r\n            <p>\r\n                Clickeado: {this.props.count} veces\r\n                <button onClick={() => {this.props.increment}}>\r\n                    + {/* Incremeta */}\r\n                </button>\r\n                <button onClick={() => {this.props.decrement}}>\r\n                    -  {/* Decrementa */}\r\n                </button>\r\n                 {/* Si quieres hacer los extra credit puede descomentar las lineas de abajo */}\r\n                 <button onClick={this.incrementIfOdd}>\r\n                    incrementa si es impar\r\n                </button>\r\n                <button onClick={this.incrementAsync}>\r\n                    Incrementa despues de un segundos\r\n                </button>  \r\n            </p>\r\n        );\r\n    }\r\n}\r\n\r\n// La función mapStateToProps especifica qué porción del árbol de estados necesita recibir este componente.\r\n// En este caso, dado que nuestro store de redux sólo almacena el valor del contador,\r\n// este componente recibe el estado completo.\r\n// Sin embargo, en una aplicación redux más compleja,\r\n// recibiría sólo las partes relevantes que necesita del objeto de estado.\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        count: state.count\r\n    };\r\n};\r\n\r\n// Se llama a la función de connect para que este componente conozca el resto de la arquitectura de redux.\r\n// Sin esto, este componente es sólo un componente tonto de React.\r\n//Pasamos todas las funciones que dependen de Redux, junto con el propio componente,\r\n// para que Redux se dé a conocer a este componente.\r\n\r\nexport default connect(mapStateToProps, { increment, decrement })(Counter);\r\n\r\n","import { INCREMENT, DECREMENT } from '../actions';\r\n\r\nconst initialState = {\r\n  count: 0\r\n}\r\n\r\n// Nuestro reducer que maneja nuestros dos casos de acción incremento y decremento.\r\n// Recibe el estado de nuestro store, junto con una action creada por nuestro action creator. \r\n// ¿Qué tiene que hacer el reducer con el contador de cada caso?\r\nexport default (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case INCREMENT:\r\n    // completa para este caso\r\n    return {...state, count:state.count + 1};\r\n    case DECREMENT:\r\n    // Fill para este otro\r\n    return {...state, count:state.count + 1};\r\n    default:\r\n      return {...state};\r\n  }\r\n};","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { createStore } from 'redux';\r\nimport { Provider } from 'react-redux';\r\nimport Counter from './components/Counter';\r\nimport counter from './reducers';\r\n\r\n// Esta línea instancia nuestro store central de Redux.\r\n// La función `createStore` recibe el reducer\r\n// que es responsable de la actualización del store , junto\r\n//con cualquier estado inicial con el que queramos que\r\n//empiece el store (que en este caso es ninguno).\r\nconst store = createStore(counter);\r\n\r\n// Aquí, envolvemos nuestro componente principal React dentro de las etiquetas del Provider,\r\n// que vienen del paquete react-redux.\r\n// Esto es necesario porque el store necesita saber hacia dónde está pasando su estado. \r\n// El componente Provider es donde \"vive\" el store.\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    {/* Brouser router */}\r\n    <Counter />\r\n    <About/>\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}